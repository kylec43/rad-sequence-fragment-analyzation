<!DOCTYPE html>
<html>

    <head>
        
        <meta charset="utf-8">
        <title>RAD-Seq</title>
        <%- include('partials/css.ejs') %>
        <%- include('partials/chartjs_scripts.ejs') %>
    </head>

    <body>
        <%- include ('partials/nav.ejs', {page: 'home', user}) %>

        <div class="row">

            <div class="col-lg-5">
                <div class="card rad-card margin-center" id="analysis_card">
                    <div class="rad-card-header">
                        <h3 class="card-title rad-card-text-header">RAD-Seq Fragment Analysis</h3>
                    </div>
                    <hr>
                    <div class="card-body rad-card-body">
                        <p id="error" class="rad-card-error-message text-center display-none"></p>               
                        <form id="analysis_form" name="analysis_form" action="/" method="post">
                            <div class="container-fluid">
                                <div class="row">
                                    <div class="col">
                                        <div class="form-group">
                                            <label for="enzyme_select">Restriction Enzyme:</label>
                                            <div class="input-group">
                                                <select class="form-control" onchange="onSelectEnzyme(this);" name="enzyme_select" id="enzyme_select">
                                                    <option>&lt&ltcustom&gt&gt</option>
                                                    <% for(let i = 0; i < restriction_enzymes.length; i++) { %>
                                                        <option id="<%= restriction_enzymes[i]['id'] %>"><%= restriction_enzymes[i]["name"] %></option>
                                                    <% } %>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col">
                                        <div class="form-group">
                                            <label for="enzyme_site">Restriction Site:</label>
                                            <div class="input-group">
                                                <input class="form-control" id="enzyme_site" name="enzyme_site" type="text" minlength="2" maxlength="8" required>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row display-none" id="secondEnzymeBlock">
                                    <div class="col">
                                        <div class="form-group">
                                            <label for="enzyme_select2">Restriction Enzyme:</label>
                                            <div class="input-group">
                                                <select class="form-control" onchange="onSelectEnzyme2(this);" name="enzyme_select2" id="enzyme_select2">
                                                    <option>&lt&ltcustom&gt&gt</option>
                                                    <% for(let i = 0; i < restriction_enzymes.length; i++) { %>
                                                        <option id="<%= restriction_enzymes[i]['id'] %>2"><%= restriction_enzymes[i]["name"] %></option>
                                                    <% } %>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col">
                                        <div class="form-group">
                                            <label for="enzyme_site">Restriction Site:</label>
                                            <div class="input-group">
                                                <input class="form-control" id="enzyme_site2" name="enzyme_site2" type="text" minlength="2" maxlength="8">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col">
                                        <label for="doubleDigest" style="display: flex; align-items: center;">
                                            <input id="doubleDigest" class="rad-checkbox" name="doubleDigest" type="checkbox" onchange="showRestrictionSite2(this)">&nbsp;Double Digest
                                        </label>
                                    </div>
                                </div>
                                <hr>
                                <div class="row">
                                    <div class="col">
                                        <div class="form-group">
                                            <label for="genome_file">Genome File:</label>
                                            <div class="input-group">
                                                <input type="file" id="genome_file" required>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <hr>
                                <div class="row">
                                    <div class="col">
                                        <div class="form-group">
                                            <label for="probability">Slice Probability</label>
                                            <div class="input-group">
                                                <input class="form-control" type="number" name="probability" id="probability" step="0.001" value="0.950" min="0.001" max="1.000" onchange="updateToFixed()" required>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <hr>
                                <div class="row">
                                    <div class="col">
                                        <div class="form-group">
                                            <label for="length_distribution">Length Distribution</label>
                                            <div class="input-group">
                                                <input class="form-control" type="number" name="length_distribution" id="length_distribution" step="1" value="50" min="1" required>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col">
                                        <div class="form-group">
                                            <label for="graph_range_min">Graph Range Min</label>
                                            <div class="input-group">
                                                <input class="form-control" type="number" name="graph_range_min" id="graph_range_min" step="1" value="1" min="1" required>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col">
                                        <div class="form-group">
                                            <label for="graph_range_max">Graph Range Max</label>
                                            <div class="input-group">
                                                <input class="form-control" type="number" name="graph_range_max" id="graph_range_max" step="1" value="1000" min="1" required>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col">
                                        <div class="form-group">
                                            <label for="outlier">Include Outliers</label>
                                            <div class="input-group">
                                                <input class="rad-checkbox" id="outlier" name="outlier" type="checkbox">
                                            </div>
                                        </div>                           
                                    </div>
                                    <div class="col">
                                        <div class="form-group">
                                            <label for="focus_range_min">Focus Range Min</label>
                                            <div class="input-group">
                                                <input class="form-control" type="number" name="focus_range_min" id="focus_range_min" step="1" value="1" min="1" required>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col">
                                        <div class="form-group">
                                            <label for="focus_range_max">Focus Range Max</label>
                                            <div class="input-group">
                                                <input class="form-control" type="number" name="focus_range_max" id="focus_range_max" step="1" value="1000" min="1" required>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <hr>
                                <div class="display-none" id="analysis_loading_block">
                                    <div class="progress" id="progress_bar_block">
                                        <div
                                        id="progress_bar"
                                        class="progress-bar"
                                        role="progressbar"
                                        ></div>
                                    </div>
                                    <div class="rad-load-block">
                                        <h5 class="rad-load-label">Analyzing</h5>
                                        <div class="spinner-border" role="status">
                                            <span class="sr-only"></span>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <button class="rad-button margin-center" type="button" onclick="performAnalysis()" id="analysis_button">Get Analysis</button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
            <div class="col-lg-7 inner-center">
                <hr style="margin-top: 0px;">
                <h3 class="inner-center">Results</h3>
                <hr>
                <div class="container-fluid rad-data-table-container" id="fragment_table_container">
                </div>
                <div class="chart-container">
                    <canvas id="fragment_chart" class="chart-canvas"></canvas>
                </div>
            </div>
        </div>

        


        <%- include('partials/scripts.ejs') %>
        <script>
            /* Inputs */
            var enzymeSelect = document.getElementById('enzyme_select');
            var enzymeSite = document.getElementById('enzyme_site');
            var enzymeSite2 = document.getElementById('enzyme_site2');
            var probability = document.getElementById('probability');
            var lengthDistribution = document.getElementById('length_distribution');
            var graphRangeMin = document.getElementById('graph_range_min');
            var graphRangeMax = document.getElementById('graph_range_max');
            var focusRangeMin = document.getElementById('focus_range_min');
            var focusRangeMax = document.getElementById('focus_range_max');
            var outlierInput = document.getElementById('outlier');
            var doubleDigestInput = document.getElementById('doubleDigest');

            var genomeFileInput = document.getElementById('genome_file');

            /* HTML elements*/
            var error = document.getElementById('error');
            var radAnalyzeBlock = document.getElementById('rad_analyze_block');
            var analysisButton = document.getElementById('analysis_button');
            var analysisLoadingBlock = document.getElementById('analysis_loading_block');
            var progressBarBlock = document.getElementById('progress_bar_block');
            var progressBar = document.getElementById('progress_bar');
            var fragmentTableContainer = document.getElementById('fragment_table_container');
            const fragmentChartCanvas = document.getElementById('fragment_chart');

            var fragmentChartObject = null;


            /*Server data*/
            var token = "<%= userToken %>"
            var DOC_NAME = "<%= user !== null ? user.uid : ''%>";
            var restriction_enzymes = [];
            restriction_enzymes = <%- JSON.stringify(restriction_enzymes) %>;

                window.onload = async ()=>{
                    <% if (user) { %>
                        await FirebaseController.signIn(token);
                    <% } %>
                    if($("#doubleDigest")[0].checked){
                        $("#secondEnzymeBlock")[0].classList.remove("display-none");
                        $("#enzyme_site2").required = true;
                    }
                };
            
            function showRestrictionSite2(checkbox){
                if(checkbox.checked){
                    document.querySelector("#secondEnzymeBlock").classList.remove("display-none");
                    enzymeSite2.required = true;
                } else {
                    document.querySelector("#secondEnzymeBlock").classList.add("display-none");
                    enzymeSite2.required = false;
                }
            }


            function updateToFixed(){
                let value = parseFloat(probability.value);
                if(!isNaN(value) && value >= 0.001 && value <= 1.000){
                    document.getElementById("probability").value = value.toFixed(3);
                }
            }

            function onSelectEnzyme(sel){
                if(sel.selectedIndex === 0){
                    enzymeSite.disabled = false;
                    enzymeSite.value = "";

                } else {
                    enzymeSite.disabled = true;
                    enzymeSite.value = restriction_enzymes[sel.selectedIndex-1].restrictionSite;

                }
            }

            function onSelectEnzyme2(sel){
                if(sel.selectedIndex === 0){
                    enzymeSite2.disabled = false;
                    enzymeSite2.value = "";
                } else {
                    enzymeSite2.disabled = true;
                    enzymeSite2.value = restriction_enzymes[sel.selectedIndex-1].restrictionSite;
                }
            }

            
            async function performAnalysis(){
                var $analysisForm = $('#analysis_form');
                if ($analysisForm[0].checkValidity()){

                    console.log("Start")
                    try{
                        let lengthDistributionNumber = parseInt(lengthDistribution.value);
                        let graphRangeMinNumber = parseInt(graphRangeMin.value);
                        let graphRangeMaxNumber = parseInt(graphRangeMax.value);
                        let focusRangeMinNumber = parseInt(focusRangeMin.value);
                        let focusRangeMaxNumber = parseInt(focusRangeMax.value);
                        let probabilityNumber = parseFloat(probability.value);

                        if(graphRangeMaxNumber < graphRangeMinNumber){
                            graphRangeMax.value = `${graphRangeMinNumber}`;
                            graphRangeMaxNumber = graphRangeMinNumber;
                        }

                        if(focusRangeMaxNumber > graphRangeMaxNumber){
                            focusRangeMax.value = `${graphRangeMaxNumber}`;
                            focusRangeMaxNumber = graphRangeMaxNumber;
                        } else if (focusRangeMaxNumber < graphRangeMinNumber){
                            focusRangeMax.value = `${graphRangeMinNumber}`;
                            focusRangeMaxNumber = graphRangeMinNumber;
                        }

                        if(focusRangeMinNumber > focusRangeMaxNumber){
                            focusRangeMin.value = `${focusRangeMaxNumber}`;
                            focusRangeMinNumber = focusRangeMaxNumber;
                        } else if(focusRangeMinNumber < graphRangeMinNumber){
                            focusRangeMin.value = `${graphRangeMinNumber}`;
                            focusRangeMinNumber = graphRangeMinNumber;
                        }

                        console.log(`1. Genome file size: ${genomeFileInput.files[0].size}`);
                        let radConfig = {
                            genomeFile: genomeFileInput.files[0],
                            restrictionSite: enzymeSite.value.toUpperCase(),
                            restrictionSite2: doubleDigest.checked ? enzymeSite2.value.toUpperCase() : null,
                            probability: probabilityNumber,
                            lengthDistribution: lengthDistributionNumber,
                            graphRangeMin: graphRangeMinNumber,
                            graphRangeMax: graphRangeMaxNumber,
                            focusRangeMin: focusRangeMinNumber,
                            focusRangeMax: focusRangeMaxNumber,
                            includeOutliers: outlierInput.checked,
                            fragmentTableContainer,
                            fragmentChartCanvas,
                            progressBar,
                            hideThenShow: [analysisButton,],
                            showThenHide: {
                                elements: [analysisLoadingBlock,],
                                displays: ["block",]
                            },
                        }

                        var analyzer = new RadSequencingAnalyzer(radConfig);

                        analyzer.onBegin(()=>{
                            progressBar.style.width = "0%";
                            analysisLoadingBlock.style.display = "block";
                            analysisButton.style.display = "none";
                            fragmentTableContainer.innerHTML = ``;
                            if(fragmentChartObject !== null) {
                                console.log("Destroyed");
                                fragmentChartObject.destroy();
                            }
                        });

                        analyzer.onProgress((percentage)=>{
                            progressBar.style.width = `${percentage}%`;
                        });

                        analyzer.onResult((data)=>{
                            analysisLoadingBlock.style.display = "none";
                            analysisButton.style.display = "block";
                            displayTableData(data);
                            displayChart(data.fragmentDistributions);
                        });

                        analyzer.onReadError(()=>{
                            analysisLoadingBlock.style.display = "none";
                            analysisButton.style.display = "block";
                        });

                        analyzer.analyze(genomeFileInput.files[0])
                        //await radAnalyze(genomeFileInput.files[0], radConfig);
                    } catch(e) {
                        console.log(`Error: ${e}`);
                    }
                } else {
                    $analysisForm[0].reportValidity()                }
            }

            function displayTableData(data){
                document.querySelector("#after-data-hr") ? document.querySelector("#after-data-hr").remove() : null;

                var re = new RegExp('^-?\\d+(?:\.\\d{0,' + (2 || -1) + '})?');
                fragmentTableContainer.innerHTML = `

                <nav class="navbar navbar-expand-sm navbar-dark bg-dark rad-navbar-data-tables">
                    <a class="navbar-brand rad-navbar-brand-data-tables" href="#">Data Tables</a>
                    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNavData">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                    <div class="collapse navbar-collapse rad-navbar-collapse-data-tables" id="navbarNavData">
                        <ul class="navbar-nav">
                        <li class="nav-item rad-item active" id="totalItem">
                            <a class="nav-link table-link" href="#" onclick="showTotalData(this)">Total</a>
                        </li>
                        <li class="nav-item rad-item" id="focusRangeItem">
                            <a class="nav-link table-link" href="#" onclick="showFocusRangeData(this)">Focus Range</a>
                        </li>
                        <li class="nav-item rad-item" id="graphRangeItem">
                            <a class="nav-link table-link" href="#" onclick="showGraphRangeData(this)">Graph Range</a>
                        </li>
                        </ul>
                    </div>
                </nav>
                <hr>
                <table class="rad-data-table" id="totalDataTable">
                    <tr>
                        <th class="rad-th" title="RS Count = Number of Restriction Sites inside Genome File">RS Count</th>
                        ${data.digestionType === "double" ? '<th class="rad-th" title="Amount of overlapping restriction sites">Conflict Sites</th>' : ''}
                        <th class="rad-th" title="Expected RS Slice Count = RS Count * Probability">Expected RS Slice Count</th>
                        <th class="rad-th" title="Actual RS Slice Count = Slicing based off of probability">Actual RS Slice Count</th>
                        <th class="rad-th" title="Fragment Count = Actual RS Slice Count + 1">Fragment Count</th>
                    </tr>
                    <tr>
                        <td class="rad-td" id="total_rs_count" title="RS Count = Number of Restriction Sites inside Genome File">${data.totalSiteCount}</td>
                        ${data.digestionType === "double" ? '<td class="rad-td" title="Amount of overlapping restriction sites">' + data.conflicts.toString() + '</td>' : ''}
                        <td class="rad-td" id="expected_rs_slice_count" title="Expected RS Slice Count = Total RS Count * Probability">${data.expectedSiteCount}</td>
                        <td class="rad-td" id="actual_rs_slice_count" title="Actual RS Slice Count = Slicing based off of probability">${data.actualSiteCount}</td>
                        <td class="rad-td" id="fragment_count" title="Fragment Count = Actual RS Slice Count + 1">${data.fragmentCount}</td>
                    </tr>
                </table>
                <table class="rad-data-table display-none" id="focusRangeDataTable">
                    <tr>
                        <th class="rad-th" title="Fragment Count = Actual RS Slice Count in range + 1">Fragment Count</th>
                        <th class="rad-th" title="Fragment Percentage = (Fragments Count/Total Fragment Count) * 100">Fragment Percentage</th>
                    </tr>
                    <tr>
                        <td class="rad-td" id="fragment_range_count" title="Fragment Count = Actual RS Slice Count in range + 1">${data.fragmentFocusRangeCount}</td>
                        <td class="rad-td" id="fragment_percentage" title="Fragment Percentage = (Fragment Count/Total Fragment Count) * 100">${(((data.fragmentFocusRangeCount)/data.fragmentCount)*100).toString().match(re)[0]}%</td>
                    </tr>
                </table>
                <table class="rad-data-table display-none" id="graphRangeDataTable">
                    <tr>
                        <th class="rad-th" title="Fragment Count = Actual RS Slice Count in range + 1">Fragment Count</th>
                        <th class="rad-th" title="Fragment Percentage = (Fragments Count/Total Fragment Count) * 100">Fragment Percentage</th>
                    </tr>
                    <tr>
                        <td class="rad-td" id="fragment_range_count" title="Fragment Count = Actual RS Slice Count in range + 1">${data.fragmentGraphRangeCount}</td>
                        <td class="rad-td" id="fragment_percentage" title="Fragment Percentage = (Fragments Count/Total Fragment Count) * 100">${(((data.fragmentGraphRangeCount)/data.fragmentCount)*100).toString().match(re)[0]}%</td>
                    </tr>
                </table>
                <hr>
                `;
                fragmentTableContainer.insertAdjacentHTML("afterend", "<hr id=\"after-data-hr\"");

                $(".nav-link.table-link").on("click", (event)=>{
                    event.preventDefault();
                    return false;
                });
            }


            function displayChart(fragmentDistributions){
                let chartLabels = [];
                let chartData = [];
                let backgroundColor = [];
                let borderColor = [];

                for(let i = 0; i < fragmentDistributions.length; i++){

                    chartLabels.push(fragmentDistributions[i].range);
                    chartData.push(`${fragmentDistributions[i].count}`);
                    if(fragmentDistributions[i].focusArea){
                        backgroundColor.push('rgba(30, 130, 76, 0.2)');
                        borderColor.push('rgba(30, 130, 76, 1)');
                    } else {
                        backgroundColor.push('rgba(54, 162, 235, 0.2)');
                        borderColor.push('rgba(54, 162, 235, 1.0)');
                    }

                }
                
                fragmentChartObject = new Chart(fragmentChartCanvas, {
                    type: 'bar',
                    data: {
                        labels: chartLabels,
                        datasets: [{
                            label: 'Fragments',
                            data: chartData,
                            backgroundColor,
                            borderColor,
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            x: {
                                title: {
                                    display: true,
                                    text: "Fragment Length"
                                }
                            },
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: "Fragment Count"
                                }
                            }
                        }
                    }
                });
                
            }

        </script>

        <script>

            function deactivateNavRadItems(){
                let listItems = document.querySelectorAll(".nav-item.rad-item");
                for(let i = 0; i < listItems.length; i++){
                    listItems[i].classList.remove("active");
                }
            }

            function hideDataTables(){
                let dataTables = document.querySelectorAll(".rad-data-table");
                for(let i = 0; i < dataTables.length; i++){
                    dataTables[i].classList.remove("display-table");
                    dataTables[i].classList.add("display-none");
                }
            }

            function showTotalData(){

                hideDataTables();
                document.querySelector("#totalDataTable").classList.add("display-table");


                deactivateNavRadItems();
                document.querySelector("#totalItem").classList.add("active");
            }

            function showFocusRangeData(){
                hideDataTables();
                document.querySelector("#focusRangeDataTable").classList.add("display-table");


                deactivateNavRadItems();
                document.querySelector("#focusRangeItem").classList.add("active");
            }

            function showGraphRangeData(){
                hideDataTables();
                document.querySelector("#graphRangeDataTable").classList.add("display-table");


                deactivateNavRadItems();
                document.querySelector("#graphRangeItem").classList.add("active");
            }
        </script>
    </body>


</html>